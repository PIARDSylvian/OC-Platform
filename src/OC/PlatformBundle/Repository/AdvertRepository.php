<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\EntityRepository;

use Doctrine\ORM\QueryBuilder;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
    public function myFindAll()
    {
        // // On recupere le query builder;
        // $queryBuilder = $this->createQueryBuilder('a');
        // // On ajouter pas de critères particuler la construction de la requete et terminé 
        // // On recuperey la query a partir du builder
        // $query = $queryBuilder->getQuery();

        // // On recupere le resultat
        // $result = $query->getResult();

        // return $result;

        // En un ligne voila notre findAll, qui retourn un tableau d entitées
        return $this
            ->createQueryBuilder('a')
            ->getQuery()
            ->getResult()
        ;
    }

    public function myFindOne($id)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.id = :id')
                ->setParameter('id',$id);

        return $qb->getQuery()->getResult();
    }

    public function findByAuthorAndDate($author, $year)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.author = :author')
                ->setParameter('author',$author)
            ->andWhere('a.date < :year')
                ->setparameter('year',$year)
            ->orderBy('a.date', 'DESC')
        ;

        return $qb->getQuery()->getResult();
    }

    public function whereCurrentYear(QueryBuilder $qb)
    {
        $qb
            ->andWhere('a.date BETWEEN :start AND :end')
                ->setParameter('start', new \Datetime(date('Y').'-01-01'))  // Date entre le 1er janvier de cette année
                ->setParameter('end',   new \Datetime(date('Y').'-12-31'))  // Et le 31 décembre de cette année
        ;
    }

    public function myFind()
    {
        $qb = $this->createQueryBuilder('a');

        // On peut ajouter ce qu'on veut avant
        $qb->where('a.author = :author')
                ->setParameter('author', 'Marine')
        ;

        // On applique notre condition sur le QueryBuilder
        $this->whereCurrentYear($qb);

        // On peut ajouter ce qu'on veut après
        $qb->orderBy('a.date', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function myFindAllDQL()
    {
        $query = $this->_em->createQuery('SELECT a FROM OCPlatformBunlde:Advert a');
        return $query->getResult;
    }

    public function getAdvertWithApplication()
    {
        $qb = $this
            ->createQueryBuilder('a')
            ->leftJoin('a.applications', 'app')
            ->addSelect('app')
        ;

        return $qb->getQuery()->getResult();

    }

    public function getAdvertWithCategories(array $categoryNames)
    {
        $qb = $this->createQueryBuilder('a');

        // On fait une jointure avec l'entité Category avec pour alias « c »
        $qb
            ->join('a.categories', 'c')
            ->addSelect('c')
        ;

        // Puis on filtre sur le nom des catégories à l'aide d'un IN
        $qb->where($qb->expr()->in('c.name', $categoryNames));
        // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

        // Enfin, on retourne le résultat
        return $qb
            ->getQuery()
            ->getResult()
        ;
    }
}
